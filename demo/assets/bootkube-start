#!/bin/bash
# Wrapper for bootkube start
set -e
BOOTKUBE_ACI="${BOOTKUBE_ACI:-quay.io/coreos/bootkube}"
BOOTKUBE_VERSION="${BOOTKUBE_VERSION:-v0.3.7}"
BOOTKUBE_ASSETS="${BOOTKUBE_ASSETS:-/opt/bootkube/assets}"
/usr/bin/rkt run \
  --trust-keys-from-https \
  --volume assets,kind=host,source=$BOOTKUBE_ASSETS \
  --mount volume=assets,target=/assets \
  $RKT_OPTS \
  ${BOOTKUBE_ACI}:${BOOTKUBE_VERSION} --net=host --exec=/bootkube -- start --asset-dir=/assets --etcd-server=http://127.0.0.1:2379 "$@"
# Dirty Hack: Revert when Tectonic components don't depend on ordering.
echo "Waiting for Kubernetes API..."
until curl --silent "http://127.0.0.1:8080/version"
do
    sleep 5
    echo "Waiting for Kubernetes API..."
done
echo
echo "Waiting for Kubernetes components..."
while curl --silent "http://127.0.0.1:8080/api/v1/namespaces/kube-system/pods" | grep Pending > /dev/null
do
    sleep 5
    echo "Waiting for Kubernetes components..."
done
sleep 10
echo
echo "Creating Heapster"
curl --silent -H "Content-Type: application/json" -XPOST -d"$(cat assets/tectonic/heapster-service.json)" "http://127.0.0.1:8080/api/v1/namespaces/kube-system/services" > /dev/null
curl --silent -H "Content-Type: application/json" -XPOST -d"$(cat assets/tectonic/heapster-deployment.json)" "http://127.0.0.1:8080/apis/extensions/v1beta1/namespaces/kube-system/deployments" > /dev/null

echo "Creating Tectonic Namespace"
curl --silent -H "Content-Type: application/yaml" -XPOST -d"$(cat assets/tectonic/tectonic-namespace.yaml)" "http://127.0.0.1:8080/api/v1/namespaces" > /dev/null

echo "Creating Initial Roles"
# NOTE(ericchiang): RBAC requires using an authenticated user to create roles, because users
# must have greater privileges than the roles they create/edit/update (as a escalation prevention).
# For tectonic, we white list the kube-system service account as "all powerful". Grab its bearer
# token and use that to create the roles and role bindings.
#
# See: http://kubernetes.io/docs/admin/authorization/#privilege-escalation-prevention-and-bootstrapping
KUBE_SECRET=$( curl --silent http://127.0.0.1:8080/api/v1/namespaces/kube-system/serviceaccounts/default | jq -r .secrets[0].name )
BEARER_TOKEN=$( curl --silent http://127.0.0.1:8080/api/v1/namespaces/kube-system/secrets/${KUBE_SECRET} | jq -r .data.token | base64 -d )

# Create the initial roles
# Delete pre-existing admin ClusterRole
curl --silent --insecure -H "Content-Type: application/yaml" -H "Authorization: Bearer $BEARER_TOKEN" -XDELETE "https://127.0.0.1:443/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/admin" > /dev/null
curl --silent --insecure -H "Content-Type: application/yaml" -H "Authorization: Bearer $BEARER_TOKEN" -XPOST -d"$(cat assets/tectonic/role-admin.yaml)" "https://127.0.0.1:443/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles" > /dev/null
curl --silent --insecure -H "Content-Type: application/yaml" -H "Authorization: Bearer $BEARER_TOKEN" -XPOST -d"$(cat assets/tectonic/role-readonly.yaml)" "https://127.0.0.1:443/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles" > /dev/null
curl --silent --insecure -H "Content-Type: application/yaml" -H "Authorization: Bearer $BEARER_TOKEN" -XPOST -d"$(cat assets/tectonic/role-user.yaml)" "https://127.0.0.1:443/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles" > /dev/null
curl --silent --insecure -H "Content-Type: application/yaml" -H "Authorization: Bearer $BEARER_TOKEN" -XPOST -d"$(cat assets/tectonic/role-discovery.yaml)" "https://127.0.0.1:443/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles" > /dev/null
curl --silent --insecure -H "Content-Type: application/yaml" -H "Authorization: Bearer $BEARER_TOKEN" -XPOST -d"$(cat assets/tectonic/role-identity.yaml)" "https://127.0.0.1:443/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles" > /dev/null

# Create the initial role bindings
curl --silent --insecure -H "Content-Type: application/yaml" -H "Authorization: Bearer $BEARER_TOKEN" -XPOST -d"$(cat assets/tectonic/binding-admin.yaml)" "https://127.0.0.1:443/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings" > /dev/null
curl --silent --insecure -H "Content-Type: application/yaml" -H "Authorization: Bearer $BEARER_TOKEN" -XPOST -d"$(cat assets/tectonic/binding-discovery.yaml)" "https://127.0.0.1:443/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings" > /dev/null
curl --silent --insecure -H "Content-Type: application/yaml" -H "Authorization: Bearer $BEARER_TOKEN" -XPOST -d"$(cat assets/tectonic/binding-tectonic-service-account.yaml)" "https://127.0.0.1:443/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings" > /dev/null
curl --silent --insecure -H "Content-Type: application/yaml" -H "Authorization: Bearer $BEARER_TOKEN" -XPOST -d"$(cat assets/tectonic/binding-tectonic-service-account-identity.yaml)" "https://127.0.0.1:443/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings" > /dev/null

echo "Creating Tectonic ConfigMap"
curl --silent -H "Content-Type: application/yaml" -XPOST -d"$(cat assets/tectonic/tectonic-config.yaml)" "http://127.0.0.1:8080/api/v1/namespaces/tectonic-system/configmaps" > /dev/null

echo "Creating Tectonic Secrets"
curl --silent -H "Content-Type: application/json" -XPOST -d"$(cat assets/tectonic/coreos-pull-secret.json)" "http://127.0.0.1:8080/api/v1/namespaces/tectonic-system/secrets" > /dev/null
curl --silent -H "Content-Type: application/json" -XPOST -d"$(cat assets/tectonic/tectonic-license-secret.json)" "http://127.0.0.1:8080/api/v1/namespaces/tectonic-system/secrets" > /dev/null
curl --silent -H "Content-Type: application/yaml" -XPOST -d"$(cat assets/tectonic/tectonic-tls-secret.yaml)" "http://127.0.0.1:8080/api/v1/namespaces/tectonic-system/secrets" > /dev/null
curl --silent -H "Content-Type: application/yaml" -XPOST -d"$(cat assets/tectonic/tectonic-ca-cert-secret.yaml)" "http://127.0.0.1:8080/api/v1/namespaces/tectonic-system/secrets" > /dev/null

echo "Creating Tectonic Identity"
curl --silent -H "Content-Type: application/yaml" -XPOST -d"$(cat assets/tectonic/identity-config.yaml)" "http://127.0.0.1:8080/api/v1/namespaces/tectonic-system/configmaps" > /dev/null
curl --silent -H "Content-Type: application/yaml" -XPOST -d"$(cat assets/tectonic/identity-svc.yaml)" "http://127.0.0.1:8080/api/v1/namespaces/tectonic-system/services" > /dev/null
curl --silent -H "Content-Type: application/yaml" -XPOST -d"$(cat assets/tectonic/identity-deployment.yaml)" "http://127.0.0.1:8080/apis/extensions/v1beta1/namespaces/tectonic-system/deployments" > /dev/null

echo "Creating Tectonic Console"
curl --silent -H "Content-Type: application/yaml" -XPOST -d"$(cat assets/tectonic/console-svc.yaml)" "http://127.0.0.1:8080/api/v1/namespaces/tectonic-system/services" > /dev/null
curl --silent -H "Content-Type: application/yaml" -XPOST -d"$(cat assets/tectonic/console-deployment.yaml)" "http://127.0.0.1:8080/apis/extensions/v1beta1/namespaces/tectonic-system/deployments" > /dev/null

echo "Creating Tectonic Monitoring"
curl --silent -H "Content-Type: application/yaml" -XPOST -d"$(cat assets/tectonic/prometheus-configmap.yaml)" "http://127.0.0.1:8080/api/v1/namespaces/tectonic-system/configmaps" > /dev/null
curl --silent -H "Content-Type: application/yaml" -XPOST -d"$(cat assets/tectonic/prometheus-deployment.yaml)" "http://127.0.0.1:8080/apis/extensions/v1beta1/namespaces/tectonic-system/deployments" > /dev/null
curl --silent -H "Content-Type: application/yaml" -XPOST -d"$(cat assets/tectonic/prometheus-service.yaml)" "http://127.0.0.1:8080/api/v1/namespaces/tectonic-system/services" > /dev/null
curl --silent -H "Content-Type: application/yaml" -XPOST -d"$(cat assets/tectonic/node-exporter-service.yaml)" "http://127.0.0.1:8080/api/v1/namespaces/tectonic-system/services" > /dev/null
curl --silent -H "Content-Type: application/yaml" -XPOST -d"$(cat assets/tectonic/node-exporter-ds.yaml)" "http://127.0.0.1:8080/apis/extensions/v1beta1/namespaces/tectonic-system/daemonsets" > /dev/null

echo "Creating Ingress"
# Deployments
curl --silent -H "Content-Type: application/yaml" -XPOST -d"$(cat assets/tectonic/default-backend-deployment.yaml)" "http://127.0.0.1:8080/apis/extensions/v1beta1/namespaces/tectonic-system/deployments" > /dev/null
if [ -f "assets/tectonic/nginx-ingress-deployment.yaml" ]; then
  curl --silent -H "Content-Type: application/yaml" -XPOST -d"$(cat assets/tectonic/nginx-ingress-deployment.yaml)" "http://127.0.0.1:8080/apis/extensions/v1beta1/namespaces/tectonic-system/deployments" > /dev/null
fi
if [ -f "assets/tectonic/nginx-ingress-conf-tmpl-configmap.yaml" ]; then
  curl --silent -H "Content-Type: application/yaml" -XPOST -d"$(cat assets/tectonic/nginx-ingress-conf-tmpl-configmap.yaml)" "http://127.0.0.1:8080/api/v1/namespaces/tectonic-system/configmaps" > /dev/null
fi
if [ -f "assets/tectonic/nginx-ingress-daemonset.yaml" ]; then
  curl --silent -H "Content-Type: application/yaml" -XPOST -d"$(cat assets/tectonic/nginx-ingress-daemonset.yaml)" "http://127.0.0.1:8080/apis/extensions/v1beta1/namespaces/tectonic-system/daemonsets" > /dev/null
fi
# Services
curl --silent -H "Content-Type: application/yaml" -XPOST -d"$(cat assets/tectonic/nginx-ingress-service.yaml)" "http://127.0.0.1:8080/api/v1/namespaces/tectonic-system/services" > /dev/null
curl --silent -H "Content-Type: application/yaml" -XPOST -d"$(cat assets/tectonic/default-backend-service.yaml)" "http://127.0.0.1:8080/api/v1/namespaces/tectonic-system/services" > /dev/null
# Config maps
curl --silent -H "Content-Type: application/yaml" -XPOST -d"$(cat assets/tectonic/default-backend-configmap.yaml)" "http://127.0.0.1:8080/api/v1/namespaces/tectonic-system/configmaps" > /dev/null
# Ingress
curl --silent -H "Content-Type: application/yaml" -XPOST -d"$(cat assets/tectonic/ingress-rules.yaml)" "http://127.0.0.1:8080/apis/extensions/v1beta1/namespaces/tectonic-system/ingresses" > /dev/null

# Stats Emitter
echo "Creating Tectonic Stats Emitter"
curl --silent -H "Content-Type: application/yaml" -XPOST -d"$(cat assets/tectonic/stats-emitter-deployment.yaml)" "http://127.0.0.1:8080/apis/extensions/v1beta1/namespaces/tectonic-system/deployments" > /dev/null

if [ -d "assets/updater/" ]; then
  echo "Creating Tectonic Updater"
  # Roles
  curl --silent --insecure -H "Content-Type: application/yaml" -H "Authorization: Bearer $BEARER_TOKEN" -XPOST -d"$(cat assets/updater/admin-binding.yaml)" "https://127.0.0.1:443/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings" > /dev/null
  # Third-party resources definitions
  curl --silent -H "Content-Type: application/yaml" -XPOST -d"$(cat assets/updater/tectonic-channel-operator-config-kind.yaml)" "http://127.0.0.1:8080/apis/extensions/v1beta1/thirdpartyresources" > /dev/null
  curl --silent -H "Content-Type: application/yaml" -XPOST -d"$(cat assets/updater/app-version-kind.yaml)" "http://127.0.0.1:8080/apis/extensions/v1beta1/thirdpartyresources" > /dev/null
  # Daemon-sets
  curl --silent -H "Content-Type: application/yaml" -XPOST -d"$(cat assets/updater/node-agent.yaml)" "http://127.0.0.1:8080/apis/extensions/v1beta1/namespaces/tectonic-system/daemonsets" > /dev/null
  # Deployments
  curl --silent -H "Content-Type: application/yaml" -XPOST -d"$(cat assets/updater/kube-version-operator-deployment.yaml)" "http://127.0.0.1:8080/apis/extensions/v1beta1/namespaces/tectonic-system/deployments" > /dev/null
  curl --silent -H "Content-Type: application/yaml" -XPOST -d"$(cat assets/updater/tectonic-channel-operator-deployment.yaml)" "http://127.0.0.1:8080/apis/extensions/v1beta1/namespaces/tectonic-system/deployments" > /dev/null
  # Third-party resources
  # Due to the way Kubernetes work, we must wait for the Kubernetes API Server to take changes into account.
  echo "Waiting for third-party resource definitions..."
  while true
  do
    r1=$(curl --silent -o /dev/null --write-out '%{http_code}\n' "http://127.0.0.1:8080/apis/coreos.com/v1/channeloperatorconfigs")
    r2=$(curl --silent -o /dev/null --write-out '%{http_code}\n' "http://127.0.0.1:8080/apis/coreos.com/v1/appversions")
    if [ "$r1" == "200" ] && [ "$r2" == "200" ]; then
      break
    fi
    sleep 3
    echo "Waiting for third-party resource definitions..."
  done
  echo
  curl --silent -H "Content-Type: application/json" -XPOST -d"$(cat assets/updater/tectonic-channel-operator-config.json)" "http://127.0.0.1:8080/apis/coreos.com/v1/namespaces/tectonic-system/channeloperatorconfigs" > /dev/null
  curl --silent -H "Content-Type: application/json" -XPOST -d"$(cat assets/updater/app-version-tectonic-cluster.json)" "http://127.0.0.1:8080/apis/coreos.com/v1/namespaces/tectonic-system/appversions" > /dev/null
  curl --silent -H "Content-Type: application/json" -XPOST -d"$(cat assets/updater/app-version-kubernetes.json)" "http://127.0.0.1:8080/apis/coreos.com/v1/namespaces/tectonic-system/appversions" > /dev/null
fi

echo "Done"
