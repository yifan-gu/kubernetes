name: expose
synopsis: |
  Take a replication controller, service, deployment or pod and expose it as a new Kubernetes Service
description: "Expose a resource as a new Kubernetes service.\n\nLooks up a deployment,
  service, replica set, replication controller or pod by name and uses the selector\nfor
  that resource as the selector for a new service on the specified port. A deployment
  or replica set\nwill be exposed as a service only if its selector is convertible
  to a selector that service supports,\ni.e. when the selector contains only the matchLabels
  component. Note that if no port is specified via\n--port and the exposed resource
  has multiple ports, all will be re-used by the new service. Also if no \nlabels
  are specified, the new service will re-use the labels from the resource it exposes.\n\nPossible
  resources include (case insensitive):\n  pod (po), service (svc), replicationcontroller
  (rc),\n  deployment, replicaset (rs)\n"
options:
- name: container-port
  usage: Synonym for --target-port
- name: create-external-load-balancer
  default_value: "false"
  usage: |
    If true, create an external load balancer for this service (trumped by --type). Implementation is cloud provider dependent. Default is 'false'.
- name: dry-run
  default_value: "false"
  usage: |
    If true, only print the object that would be sent, without sending it.
- name: external-ip
  usage: |
    Additional external IP address (not managed by Kubernetes) to accept for the service. If this IP is routed to a node, the service can be accessed by this IP in addition to its generated service IP.
- name: filename
  shorthand: f
  default_value: '[]'
  usage: |
    Filename, directory, or URL to a file identifying the resource to expose a service
- name: generator
  default_value: service/v2
  usage: |
    The name of the API generator to use. There are 2 generators: 'service/v1' and 'service/v2'. The only difference between them is that service port in v1 is named 'default', while it is left unnamed in v2. Default is 'service/v2'.
- name: labels
  shorthand: l
  usage: Labels to apply to the service created by this call.
- name: load-balancer-ip
  usage: |
    IP to assign to to the Load Balancer. If empty, an ephemeral IP will be created and used (cloud-provider specific).
- name: name
  usage: The name for the newly created object.
- name: no-headers
  default_value: "false"
  usage: When using the default output, don't print headers.
- name: output
  shorthand: o
  usage: |
    Output format. One of: json|yaml|wide|name|go-template=...|go-template-file=...|jsonpath=...|jsonpath-file=... See golang template [http://golang.org/pkg/text/template/#pkg-overview] and jsonpath template [http://releases.k8s.io/HEAD/docs/user-guide/jsonpath.md].
- name: output-version
  usage: |
    Output the formatted object with the given group version (for ex: 'extensions/v1beta1').
- name: overrides
  usage: |
    An inline JSON override for the generated object. If this is non-empty, it is used to override the generated object. Requires that the object supply a valid apiVersion field.
- name: port
  usage: |
    The port that the service should serve on. Copied from the resource being exposed, if unspecified
- name: protocol
  usage: |
    The network protocol for the service to be created. Default is 'TCP'.
- name: record
  default_value: "false"
  usage: Record current kubectl command in the resource annotation.
- name: recursive
  shorthand: R
  default_value: "false"
  usage: If true, process directory recursively.
- name: save-config
  default_value: "false"
  usage: |
    If true, the configuration of current object will be saved in its annotation. This is useful when you want to perform kubectl apply on this object in the future.
- name: selector
  usage: |
    A label selector to use for this service. Only equality-based selector requirements are supported. If empty (the default) infer the selector from the replication controller or replica set.
- name: session-affinity
  usage: |
    If non-empty, set the session affinity for the service to this; legal values: 'None', 'ClientIP'
- name: show-all
  shorthand: a
  default_value: "false"
  usage: |
    When printing, show all resources (default hide terminated pods.)
- name: show-labels
  default_value: "false"
  usage: |
    When printing, show all labels as the last column (default hide labels column)
- name: sort-by
  usage: |
    If non-empty, sort list types using this field specification.  The field specification is expressed as a JSONPath expression (e.g. '{.metadata.name}'). The field in the API resource specified by this JSONPath expression must be an integer or a string.
- name: target-port
  usage: |
    Name or number for the port on the container that the service should direct traffic to. Optional.
- name: template
  usage: |
    Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
- name: type
  usage: |
    Type for this service: ClusterIP, NodePort, or LoadBalancer. Default is 'ClusterIP'.
inherited_options:
- name: alsologtostderr
  default_value: "false"
  usage: log to standard error as well as files
- name: api-version
  usage: |
    DEPRECATED: The API version to use when talking to the server
- name: as
  usage: Username to impersonate for the operation.
- name: certificate-authority
  usage: Path to a cert. file for the certificate authority.
- name: client-certificate
  usage: Path to a client certificate file for TLS.
- name: client-key
  usage: Path to a client key file for TLS.
- name: cluster
  usage: The name of the kubeconfig cluster to use
- name: context
  usage: The name of the kubeconfig context to use
- name: insecure-skip-tls-verify
  default_value: "false"
  usage: |
    If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure.
- name: kubeconfig
  usage: Path to the kubeconfig file to use for CLI requests.
- name: log-backtrace-at
  default_value: :0
  usage: when logging hits line file:N, emit a stack trace
- name: log-dir
  usage: If non-empty, write log files in this directory
- name: log-flush-frequency
  default_value: 5s
  usage: Maximum number of seconds between log flushes
- name: logtostderr
  default_value: "true"
  usage: log to standard error instead of files
- name: match-server-version
  default_value: "false"
  usage: Require server version to match client version
- name: namespace
  usage: If present, the namespace scope for this CLI request.
- name: password
  usage: Password for basic authentication to the API server.
- name: server
  shorthand: s
  usage: The address and port of the Kubernetes API server
- name: stderrthreshold
  default_value: "2"
  usage: logs at or above this threshold go to stderr
- name: token
  usage: Bearer token for authentication to the API server.
- name: user
  usage: The name of the kubeconfig user to use
- name: username
  usage: Username for basic authentication to the API server.
- name: v
  default_value: "0"
  usage: log level for V logs
- name: vmodule
  usage: |
    comma-separated list of pattern=N settings for file-filtered logging
example: |-
  # Create a service for a replicated nginx, which serves on port 80 and connects to the containers on port 8000.
  kubectl expose rc nginx --port=80 --target-port=8000

  # Create a service for a replication controller identified by type and name specified in "nginx-controller.yaml", which serves on port 80 and connects to the containers on port 8000.
  kubectl expose -f nginx-controller.yaml --port=80 --target-port=8000

  # Create a service for a pod valid-pod, which serves on port 444 with the name "frontend"
  kubectl expose pod valid-pod --port=444 --name=frontend

  # Create a second service based on the above service, exposing the container port 8443 as port 443 with the name "nginx-https"
  kubectl expose service nginx --port=443 --target-port=8443 --name=nginx-https

  # Create a service for a replicated streaming application on port 4100 balancing UDP traffic and named 'video-stream'.
  kubectl expose rc streamer --port=4100 --protocol=udp --name=video-stream

  # Create a service for a replicated nginx using replica set, which serves on port 80 and connects to the containers on port 8000.
  kubectl expose rs nginx --port=80 --target-port=8000

  # Create a service for an nginx deployment, which serves on port 80 and connects to the containers on port 8000.
  kubectl expose deployment nginx --port=80 --target-port=8000
see_also:
- kubectl
